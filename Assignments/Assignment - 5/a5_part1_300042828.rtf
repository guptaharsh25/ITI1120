{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
Q1.a\
\
largest_34(a) has a runtime of O(n*log(n)). It takes n*log(n) time to sort a list. Then we can simply return the sum of the values at index -4 and -3, which is one calculation.\
\
Q1.b\
\
largest_third(a) has a runtime of O(n*log(n)). First, sorting costs n*log(n) time. Then finding the index of where the largest third starts is one calculation. Then, summing all those numbers is n//3 calculations. There are n*log(n) + n//3 calculations, but n//3 is irrelevant compared to n*log(n), hence the runtime is O(n*log(n)).\
\
Q1.c\
\
third_at_least(a) has a runtime of O(n*log(n)). First, finding the index of where the largest third starts is one calculation. Then, sorting costs n*log(n) time. Then looping through the list is roughly O(n) time. The if statement costs minimal calculations (constant time). There are n*log(n) + n calculations, but n is irrelevant compared to n*log(n), hence the runtime is O(n*log(n)).\
\
Q1.d\
\
sum_tri(a, x) has a runtime of O(n**3) since there are three nested for loops. Each loop runs for each iteration of the containing loop, and each loop has a runtime of O(n) individually.}