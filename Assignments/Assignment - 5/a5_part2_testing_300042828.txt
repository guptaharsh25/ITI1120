RESTART: /Users/harshgupta/Desktop/uOttawa/Year 1/Semester 1/ITI1120/Assignments/Assignment - 5/a5_part2_300042828.py >>> r1 = Rectangle(Point(), Point(2,1), "blue")>>> r1Rectangle(Point(0,0),Point(2,1),'blue')>>> print(r1)I am a blue rectangle with my bottom left corner at (0, 0) and top right corner at (2, 1).>>> r2 = Rectangle(Point(), Point(2,1), "blue")>>> r1 is r2False>>> r1 == r2True>>> r1.get_color()'blue'>>> r1.get_bottom_left()Point(0,0)>>> r1.get_top_right()Point(2,1)>>> r2.reset_color("red")>>> r2Rectangle(Point(0,0),Point(2,1),'red')>>> print(r2)I am a red rectangle with my bottom left corner at (0, 0) and top right corner at (2, 1).>>> r2.get_color()'red'>>> r2.move(1,0)>>> r1.get_perimeter()6>>> r1.get_area()2>>> r1.intersects(r2)True>>> r2Rectangle(Point(1,0),Point(3,1),'red')>>> r2.move(2,0)>>> print(r2)I am a red rectangle with my bottom left corner at (3, 0) and top right corner at (5, 1).>>> r1.intersects(r2)False>>> r2.intersects(r1)False>>> r1Rectangle(Point(0,0),Point(2,1),'blue')>>> r1.contains(1,1)True>>> r1.contains(0,0)True>>> r1.contains(2,2)False>>> # COMPLETED CHECKING RECTANGLE CLASS, NOW LETS CHECK CANVAS>>> c = Canvas()>>> r3 = Rectangle(Point(1,1), Point(3,2), "blue")>>> len(c)0>>> cCanvas([])>>> c.add_one_rectangle(r1)>>> c.add_one_rectangle(r2)>>> c.add_one_rectangle(r3)>>> r4 = eval(repr(r2))>>> r4Rectangle(Point(3,0),Point(5,1),'red')>>> r4.move(-2,0)>>> c.add_one_rectangle(r4)>>> len(c)4>>> c.count_same_color("blue")2>>> c.count_same_color("red")2>>> c.count_same_color("ashwin")0>>> c.total_perimeter()24>>> c.min_enclosing_rectangle()Rectangle(Point(0,0),Point(5,2),'beige')>>> c.add_one_rectangle(c.min_enclosing_rectangle())>>> len(c)5>>> c.min_enclosing_rectangle()Rectangle(Point(0,0),Point(5,2),'beige')>>> # above, we added the min enclosing rectangle to the canvas and ran min_enclosing rectangle again, which gave the exact same output (this makes sense)>>> # below, the expected result is false as r1 and r2 do not intersect.>>> c.common_point()False>>> # done